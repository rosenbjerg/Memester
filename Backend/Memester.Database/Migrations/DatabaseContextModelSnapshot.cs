// <auto-generated />
using System;
using Memester.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Memester.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Memester.Models.FavoritedMeme", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Favorited")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "MemeId");

                    b.HasIndex("MemeId");

                    b.ToTable("FavoritedMemes");
                });

            modelBuilder.Entity("Memester.Models.Like", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemeId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "MemeId");

                    b.HasIndex("MemeId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Memester.Models.LoginToken", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedCorrelationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedCorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Key");

                    b.HasIndex("UserId");

                    b.ToTable("LoginTokens");
                });

            modelBuilder.Entity("Memester.Models.Meme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<int>("FileSize")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ThreadId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.ToTable("Memes");
                });

            modelBuilder.Entity("Memester.Models.Thread", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("Memester.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Memester.Models.Vote", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Cast")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Positive")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "MemeId");

                    b.HasIndex("MemeId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Memester.Models.FavoritedMeme", b =>
                {
                    b.HasOne("Memester.Models.Meme", "Meme")
                        .WithMany("Favorites")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memester.Models.User", "User")
                        .WithMany("Favorited")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Memester.Models.Like", b =>
                {
                    b.HasOne("Memester.Models.Meme", "Meme")
                        .WithMany()
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memester.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Memester.Models.LoginToken", b =>
                {
                    b.HasOne("Memester.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Memester.Models.Meme", b =>
                {
                    b.HasOne("Memester.Models.Thread", "Thread")
                        .WithMany("Memes")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("Memester.Models.Vote", b =>
                {
                    b.HasOne("Memester.Models.Meme", "Meme")
                        .WithMany("Votes")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memester.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Memester.Models.Meme", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Memester.Models.Thread", b =>
                {
                    b.Navigation("Memes");
                });

            modelBuilder.Entity("Memester.Models.User", b =>
                {
                    b.Navigation("Favorited");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
